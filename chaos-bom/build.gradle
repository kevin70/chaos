publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        description = "Yein Bill of Materials"
        scm {
          connection = "scm:git:git@github.com:kevin70/chaos.git"
          developerConnection = "scm:git:ssh://github.com/kevin70/chaos.git"
          url = "https://github.com/kevin70/chaos"
        }
        developers {
          developer {
            id = "kk70"
            name = "Kevin Zou"
            email = "kevinz@weghst.com"
            url = "https://kk70.top"
          }
        }
      }
    }
  }
}

dependencyManagement {
  imports {
    mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    mavenBom("io.helidon:helidon-bom:${helidonVersion}")
    mavenBom("org.jdbi:jdbi3-bom:${jdbi3Version}")
    mavenBom("io.r2dbc:r2dbc-bom:${r2dbcVersion}")
    mavenBom("com.google.inject:guice-bom:${guiceVersion}")
    mavenBom("io.micrometer:micrometer-bom:${micrometerVersion}")
    mavenBom("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
    mavenBom("org.apache.logging.log4j:log4j-bom:${log4jVersion}")
    mavenBom("io.projectreactor:reactor-bom:${reactorVersion}")
    mavenBom("org.springframework:spring-framework-bom:${springVersion}")
    mavenBom("io.grpc:grpc-bom:${grpcVersion}")
    mavenBom("org.junit:junit-bom:${junitVersion}")
    mavenBom("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
  }

  dependencies {
    dependencySet("org.mapstruct:${mapstructVersion}") {
      entry("mapstruct")
      entry("mapstruct-processor")
    }
    dependencySet("org.mockito:${mockitoVersion}") {
      entry("mockito-core")
      entry("mockito-inline")
    }
    dependencySet("org.apache.httpcomponents:${httpcomponentsVersion}") {
      entry("httpclient")
      entry("fluent-hc")
    }
    dependencySet("io.jsonwebtoken:${jjwtVersion}") {
      entry("jjwt-api")
      entry("jjwt-impl")
      entry("jjwt-jackson")
    }
    dependencySet("org.zalando:${problemSpringVersion}") {
      entry("problem-spring-web")
      entry("problem-spring-web-starter")
    }
    dependencySet("org.apache.skywalking:${skywalkingVersion}") {
      entry("apm-toolkit-micrometer-registry")
    }
    dependency("com.auth0:java-jwt:${auth0Jwt}")
    dependency("org.projectlombok:lombok:${lombokVersion}")
    dependency("org.slf4j:slf4j-api:${slf4jVersion}")
    dependency("org.ow2.asm:asm:${asmVersion}")

    // TOOLS
    dependency("com.google.guava:guava:${guavaVersion}")
    dependency("com.flipkart.utils:javatuples:${javatuplesVersion}")
    dependency("com.github.ben-manes.caffeine:caffeine:${caffeineVersion}")
    dependency("com.typesafe:config:${typesafeConfigVersion}")
    dependency("javax.mail:javax.mail-api:${javaxMailVersion}")
    dependency("com.sun.mail:javax.mail:${javaxMailVersion}")
    dependency("org.roaringbitmap:RoaringBitmap:${roaringBitmapVersion}")

    // TEST
    dependency("org.assertj:assertj-core:${assertjVersion}")
    dependency("org.powermock:powermock-reflect:${powermockReflectVersion}")
    dependency("com.github.stefanbirkner:system-lambda:${systemLambdaVersion}")
    dependency("org.openjdk.jmh:jmh-core:${jmhVersion}")
    dependency("org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}")
    dependency("org.openjdk.jol:jol-cli:${jolVersion}")
    dependency("org.openjdk.jol:jol-core:${jolVersion}")
    dependency("com.github.javafaker:javafaker:${javafakerVersion}")

    // DB
    dependency("mysql:mysql-connector-java:${mysqlVersion}")
    dependency("org.postgresql:postgresql:${postgresqlVersion}")
    dependency("redis.clients:jedis:${jedisVersion}")
    dependency("io.lettuce:lettuce-core:${lettuceVersion}")
    dependency("org.redisson:redisson:${redissonVersion}")

    // ORM
    dependency("org.mybatis:mybatis:${mybatisVersion}")
    dependency("org.mybatis:mybatis-spring:${mybatisSpringVersion}")
    dependency("org.mybatis:mybatis-guice:${mybatisGuiceVersion}")
    dependency("org.mybatis:mybatis-typehandlers-jsr310:${mybatisJsr310Version}")
    dependency("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootVersion}")

    // 3RD
    dependency("com.aliyun:aliyun-java-sdk-core:${aliyunSdkVersion}")
    dependency("com.qiniu:qiniu-java-sdk:${qiniuSdkVersion}")

    // CHINESE
    dependency("io.github.biezhi:TinyPinyin:${tinyPinyinVersion}")

    // SELF
    dependency("${group}:chaos-core:${version}")
    dependency("${group}:chaos-web:${version}")
  }
}
